// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Local {
  id            Int         @id @default(autoincrement())
  nome          String
  numeracaoSala Int
  descricao     String?
  tipo          TipoSala?
  localizacao   Andares?
  status        StatusSala?
  capacidade    Int
  fotos         String?

  reservas Reserva[] //1:N
}

enum TipoSala {
  SALA_AULA
  LABORATORIO
  LAB_ESPECIAL
  GABINETE
  SECRETARIA
  CENTRO_ACADEMICO
  COORDENACAO
  REUNIAO
}

enum Andares {
  PRIMEIRO_ANDAR
  SEGUNDO_ANDAR
  TERCEIRO_ANDAR
}

enum StatusSala {
  LIVRE
  RESERVADA
  EM_MANUTENÇÃO
  PROBLEMA_TECNICO
}

enum NivelSuperior {
  GRADUACAO
  POS_GRADUACAO
  MESTRADO
  DOUTORADO
  POS_DOUTORADO
}

enum TipoReserva {
  DISCIPLINA
  OFICINA
  OUTRO
}

//TODO: Todos os usuários poderão passar salas favoritas?
model Usuario {
  id           Int         @unique @default(autoincrement())
  nomeCompleto String
  nomeSocial   String?
  email        String
  tipoUsuario  TipoUsuario
  Reserva      Reserva[]
}

enum TipoUsuario {
  DOCENTE
  DISCENTE
  SECRETARIO
  ADMIN
}

//MARK: - Temporários
model Docente {
  id Int @unique @default(autoincrement())
}

model Discente {
  id Int @unique @default(autoincrement())
}

//MARK: - Reserva + Secretário
//TODO: Melhorar as relações depois
model Secretario {
  id Int @unique @default(autoincrement())

  RegistroReserva RegistroReserva[]
}

model Reserva {
  id           Int          @unique @default(autoincrement())
  local        Local        @relation(fields: [localId], references: [id]) //1:1
  localId      Int
  tipo         TipoReserva
  dataInicio   DateTime
  dataFim      DateTime
  dataPedido   DateTime     @default(now())
  statusPedido StatusPedido @default(AGUARDANDO)

  usuarioId Int
  usuario   Usuario           @relation(fields: [usuarioId], references: [id])
  registros RegistroReserva[]
}

enum StatusPedido {
  AGUARDANDO
  APROVADO
  REJEITADO
}

model RegistroReserva {
  id       Int          @unique @default(autoincrement())
  status   StatusPedido
  mensagem String?
  data     DateTime     @default(now())

  reservaId    Int
  reserva      Reserva    @relation(fields: [reservaId], references: [id])
  secretario   Secretario @relation(fields: [secretarioId], references: [id])
  secretarioId Int
}
