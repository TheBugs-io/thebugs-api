generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Local {
  id            Int                  @id @default(autoincrement())
  nome          String
  numeracaoSala String
  descricao     String?
  tipo          TipoSala?
  localizacao   Andares?
  status        StatusSala?
  capacidade    Int
  fotos         String?
  reservas      Reserva[]
  solicitacoes  SolicitacaoReserva[]
}

model SolicitacaoRegistro {
  id           Int                       @id @default(autoincrement())
  nomeCompleto String
  nomeSocial   String?
  email        String                    @unique
  tipoUsuario  TipoUsuario
  token        String                    @unique
  status       StatusSolicitacaoRegistro @default(PENDENTE)
  criadoEm     DateTime                  @default(now())
  atualizadoEm DateTime                  @updatedAt
  secretarioId Int?
  usuarioId    Int?
  secretario   Secretario?               @relation(fields: [secretarioId], references: [id])
  usuario      Usuario?                  @relation(fields: [usuarioId], references: [id])
}

model Usuario {
  id                  Int                   @id @default(autoincrement())
  nomeCompleto        String
  nomeSocial          String?
  email               String                @unique
  senha               String
  tipo                TipoUsuario
  Discente            Discente?
  Docente             Docente?
  Reserva             Reserva[]
  Secretario          Secretario?
  SolicitacaoRegistro SolicitacaoRegistro[]
  SolicitacaoReserva  SolicitacaoReserva[]
}

model Docente {
  id            Int           @id @default(autoincrement())
  vinculo       VinculoInst
  nivelSuperior NivelSuperior
  departamento  String?
  siape         String
  usuarioId     Int           @unique
  usuario       Usuario       @relation(fields: [usuarioId], references: [id])
}

enum VinculoInst {
  EFETIVO
  SUBSTITUTO
  TERCEIRIZADO
  OUTRO
}

model Discente {
  id            Int           @id @default(autoincrement())
  matricula     String
  nivelSuperior NivelSuperior
  smd           Boolean
  curso         String
  usuarioId     Int           @unique
  usuario       Usuario       @relation(fields: [usuarioId], references: [id])
}

model Secretario {
  id                  Int                   @id @default(autoincrement())
  usuarioId           Int                   @unique
  RegistroReserva     RegistroReserva[]
  usuario             Usuario               @relation(fields: [usuarioId], references: [id])
  SolicitacaoRegistro SolicitacaoRegistro[]
}

model Reserva {
  id                 Int                  @id @unique @default(autoincrement())
  localId            Int
  tipo               TipoReserva
  dataInicio         DateTime
  dataFim            DateTime
  horarioInicio      Int?
  horarioFim         Int?
  repeteEm           DiaSemana[]
  dataPedido         DateTime             @default(now())
  statusPedido       StatusPedido         @default(AGUARDANDO)
  usuarioId          Int
  registros          RegistroReserva[]
  local              Local                @relation(fields: [localId], references: [id])
  usuario            Usuario              @relation(fields: [usuarioId], references: [id])
  SolicitacaoReserva SolicitacaoReserva[]
}

model SolicitacaoReserva {
  id            Int          @id @default(autoincrement())
  localId       Int
  tipo          TipoReserva
  dataInicio    DateTime
  dataFim       DateTime
  horarioInicio Int
  horarioFim    Int
  repeteEm      DiaSemana[]
  dataPedido    DateTime     @default(now())
  status        StatusPedido @default(AGUARDANDO)
  usuarioId     Int
  reservaId     Int?

  // Relações -> Local, usuário que pediu e objeto de reserva
  local   Local    @relation(fields: [localId], references: [id])
  usuario Usuario  @relation(fields: [usuarioId], references: [id])
  reserva Reserva? @relation(fields: [reservaId], references: [id])

  @@map("solicitacoes_reserva")
}

model RegistroReserva {
  id           Int          @unique @default(autoincrement())
  status       StatusPedido
  mensagem     String?
  data         DateTime     @default(now())
  reservaId    Int
  secretarioId Int
  reserva      Reserva      @relation(fields: [reservaId], references: [id])
  secretario   Secretario   @relation(fields: [secretarioId], references: [id])
}

enum TipoSala {
  SALA_AULA
  LABORATORIO
  LAB_ESPECIAL
  GABINETE
  SECRETARIA
  CENTRO_ACADEMICO
  COORDENACAO
  REUNIAO
}

enum Andares {
  PRIMEIRO_ANDAR
  SEGUNDO_ANDAR
  TERCEIRO_ANDAR
}

enum StatusSala {
  LIVRE
  RESERVADA
  EM_MANUTENCAO
  PROBLEMA_TECNICO
}

enum NivelSuperior {
  GRADUACAO
  POS_GRADUACAO
  MESTRADO
  DOUTORADO
  POS_DOUTORADO
}

enum TipoReserva {
  DISCIPLINA
  OFICINA
  EVENTO
  OUTRO
}

enum TipoUsuario {
  DOCENTE
  DISCENTE
  SECRETARIO
  ADMIN
}

enum StatusPedido {
  AGUARDANDO
  APROVADO
  REJEITADO
}

enum StatusSolicitacaoRegistro {
  PENDENTE
  APROVADO
  REJEITADO
  EXPIRADO
}

enum DiaSemana {
  SEGUNDA_FEIRA
  TERCA_FEIRA
  QUARTA_FEIRA
  QUINTA_FEIRA
  SEXTA_FEIRA
  SABADO
}
